// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminPanel_CheckTotalBalance_FullMethodName = "/admin.AdminPanel/CheckTotalBalance"
	AdminPanel_CheckCleanYield_FullMethodName   = "/admin.AdminPanel/CheckCleanYield"
	AdminPanel_CheckDriverData_FullMethodName   = "/admin.AdminPanel/CheckDriverData"
	AdminPanel_CheckClientData_FullMethodName   = "/admin.AdminPanel/CheckClientData"
	AdminPanel_RegisterAdmin_FullMethodName     = "/admin.AdminPanel/RegisterAdmin"
	AdminPanel_LoginAdmin_FullMethodName        = "/admin.AdminPanel/LoginAdmin"
)

// AdminPanelClient is the client API for AdminPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Основной сервис
type AdminPanelClient interface {
	CheckTotalBalance(ctx context.Context, in *CheckBalanceRequest, opts ...grpc.CallOption) (*CheckBalanceResponse, error)
	CheckCleanYield(ctx context.Context, in *CheckYieldRequest, opts ...grpc.CallOption) (*CheckYieldResponse, error)
	CheckDriverData(ctx context.Context, in *DataDriverRequest, opts ...grpc.CallOption) (*DataDriverResponse, error)
	CheckClientData(ctx context.Context, in *DataClientRequest, opts ...grpc.CallOption) (*DataClientResponse, error)
	RegisterAdmin(ctx context.Context, in *RegReq, opts ...grpc.CallOption) (*RegResp, error)
	LoginAdmin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
}

type adminPanelClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminPanelClient(cc grpc.ClientConnInterface) AdminPanelClient {
	return &adminPanelClient{cc}
}

func (c *adminPanelClient) CheckTotalBalance(ctx context.Context, in *CheckBalanceRequest, opts ...grpc.CallOption) (*CheckBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckBalanceResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CheckTotalBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CheckCleanYield(ctx context.Context, in *CheckYieldRequest, opts ...grpc.CallOption) (*CheckYieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckYieldResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CheckCleanYield_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CheckDriverData(ctx context.Context, in *DataDriverRequest, opts ...grpc.CallOption) (*DataDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataDriverResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CheckDriverData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CheckClientData(ctx context.Context, in *DataClientRequest, opts ...grpc.CallOption) (*DataClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataClientResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CheckClientData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) RegisterAdmin(ctx context.Context, in *RegReq, opts ...grpc.CallOption) (*RegResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegResp)
	err := c.cc.Invoke(ctx, AdminPanel_RegisterAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) LoginAdmin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AdminPanel_LoginAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminPanelServer is the server API for AdminPanel service.
// All implementations must embed UnimplementedAdminPanelServer
// for forward compatibility.
//
// Основной сервис
type AdminPanelServer interface {
	CheckTotalBalance(context.Context, *CheckBalanceRequest) (*CheckBalanceResponse, error)
	CheckCleanYield(context.Context, *CheckYieldRequest) (*CheckYieldResponse, error)
	CheckDriverData(context.Context, *DataDriverRequest) (*DataDriverResponse, error)
	CheckClientData(context.Context, *DataClientRequest) (*DataClientResponse, error)
	RegisterAdmin(context.Context, *RegReq) (*RegResp, error)
	LoginAdmin(context.Context, *LoginReq) (*LoginResp, error)
	mustEmbedUnimplementedAdminPanelServer()
}

// UnimplementedAdminPanelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminPanelServer struct{}

func (UnimplementedAdminPanelServer) CheckTotalBalance(context.Context, *CheckBalanceRequest) (*CheckBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTotalBalance not implemented")
}
func (UnimplementedAdminPanelServer) CheckCleanYield(context.Context, *CheckYieldRequest) (*CheckYieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCleanYield not implemented")
}
func (UnimplementedAdminPanelServer) CheckDriverData(context.Context, *DataDriverRequest) (*DataDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDriverData not implemented")
}
func (UnimplementedAdminPanelServer) CheckClientData(context.Context, *DataClientRequest) (*DataClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClientData not implemented")
}
func (UnimplementedAdminPanelServer) RegisterAdmin(context.Context, *RegReq) (*RegResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (UnimplementedAdminPanelServer) LoginAdmin(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAdmin not implemented")
}
func (UnimplementedAdminPanelServer) mustEmbedUnimplementedAdminPanelServer() {}
func (UnimplementedAdminPanelServer) testEmbeddedByValue()                    {}

// UnsafeAdminPanelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminPanelServer will
// result in compilation errors.
type UnsafeAdminPanelServer interface {
	mustEmbedUnimplementedAdminPanelServer()
}

func RegisterAdminPanelServer(s grpc.ServiceRegistrar, srv AdminPanelServer) {
	// If the following call pancis, it indicates UnimplementedAdminPanelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminPanel_ServiceDesc, srv)
}

func _AdminPanel_CheckTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CheckTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CheckTotalBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CheckTotalBalance(ctx, req.(*CheckBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CheckCleanYield_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckYieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CheckCleanYield(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CheckCleanYield_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CheckCleanYield(ctx, req.(*CheckYieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CheckDriverData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CheckDriverData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CheckDriverData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CheckDriverData(ctx, req.(*DataDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CheckClientData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CheckClientData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CheckClientData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CheckClientData(ctx, req.(*DataClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_RegisterAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).RegisterAdmin(ctx, req.(*RegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_LoginAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).LoginAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_LoginAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).LoginAdmin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminPanel_ServiceDesc is the grpc.ServiceDesc for AdminPanel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminPanel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminPanel",
	HandlerType: (*AdminPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTotalBalance",
			Handler:    _AdminPanel_CheckTotalBalance_Handler,
		},
		{
			MethodName: "CheckCleanYield",
			Handler:    _AdminPanel_CheckCleanYield_Handler,
		},
		{
			MethodName: "CheckDriverData",
			Handler:    _AdminPanel_CheckDriverData_Handler,
		},
		{
			MethodName: "CheckClientData",
			Handler:    _AdminPanel_CheckClientData_Handler,
		},
		{
			MethodName: "RegisterAdmin",
			Handler:    _AdminPanel_RegisterAdmin_Handler,
		},
		{
			MethodName: "LoginAdmin",
			Handler:    _AdminPanel_LoginAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin.proto",
}
